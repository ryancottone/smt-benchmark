/**
 * @module @cedoor/smt
 * @version 0.1.7
 * @file Sparse Merkle tree implementation in TypeScript.
 * @copyright Omar Desogus 2021
 * @license MIT
 * @see [Github]{@link https://github.com/cedoor/sparse-merkle-tree}
*/
var smt=function(t){"use strict";function e(t){return("bigint"==typeof t?t.toString(2):function(t){for(var e=Number("0x"+t[0]).toString(2),r=1;r<t.length;r++)e+=Number("0x"+t[r]).toString(2).padStart(4,"0");return e}(t)).padStart(256,"0").split("").reverse().map(Number)}function r(t){return"string"==typeof t&&/^[0-9A-Fa-f]{1,64}$/.test(t)}var i=function(){function t(t,e){if(void 0===e&&(e=!1),e){if("function"!=typeof BigInt)throw new Error("Big numbers are not supported");if("bigint"!=typeof t([BigInt(1),BigInt(1)]))throw new Error("The hash function must return a big number")}else if(!r(t(["1","1"])))throw new Error("The hash function must return a hexadecimal");this.hash=t,this.bigNumbers=e,this.zeroNode=e?BigInt(0):"0",this.entryMark=e?BigInt(1):"1",this.nodes=new Map,this.root=this.zeroNode}return t.prototype.get=function(t){return this.checkParameterType(t),this.retrieveEntry(t).entry[1]},t.prototype.add=function(t,r){this.checkParameterType(t),this.checkParameterType(r);var i=this.retrieveEntry(t),o=i.entry,n=i.matchingEntry,s=i.sidenodes;if(void 0!==o[1])throw new Error('Key "'+t+'" already exists');var h=e(t),a=n?this.hash(n):this.zeroNode;if(s.length>0&&this.deleteOldNodes(a,h,s),n){for(var d=e(n[0]),u=s.length;d[u]===h[u];u++)s.push(this.zeroNode);s.push(a)}var y=this.hash([t,r,this.entryMark]);this.nodes.set(y,[t,r,this.entryMark]),this.root=this.addNewNodes(y,h,s)},t.prototype.update=function(t,r){this.checkParameterType(t),this.checkParameterType(r);var i=this.retrieveEntry(t),o=i.entry,n=i.sidenodes;if(void 0===o[1])throw new Error('Key "'+t+'" does not exist');var s=e(t),h=this.hash(o);this.nodes.delete(h),this.deleteOldNodes(h,s,n);var a=this.hash([t,r,this.entryMark]);this.nodes.set(a,[t,r,this.entryMark]),this.root=this.addNewNodes(a,s,n)},t.prototype.delete=function(t){this.checkParameterType(t);var r=this.retrieveEntry(t),i=r.entry,o=r.sidenodes;if(void 0===i[1])throw new Error('Key "'+t+'" does not exist');var n=e(t),s=this.hash(i);if(this.nodes.delete(s),this.root=this.zeroNode,o.length>0)if(this.deleteOldNodes(s,n,o),this.isLeaf(o[o.length-1])){var h=o.pop(),a=function(t){for(var e=t.length-1;e>=0;e--)if(0!==Number("0x"+t[e]))return e;return-1}(o);this.root=this.addNewNodes(h,n,o,a)}else this.root=this.addNewNodes(this.zeroNode,n,o)},t.prototype.createProof=function(t){this.checkParameterType(t);var e=this.retrieveEntry(t),r=e.entry;return{entry:r,matchingEntry:e.matchingEntry,sidenodes:e.sidenodes,root:this.root,membership:!!r[1]}},t.prototype.verifyProof=function(t){if(t.matchingEntry){var r=e(t.matchingEntry[0]);n=this.hash(t.matchingEntry);if(this.calculateRoot(n,r,t.sidenodes)===t.root){var i=function(t,e){for(var r=t.length<e.length?t:e,i=0;i<r.length;i++)if(t[i]!==e[i])return r.slice(0,i);return r.slice()}(o=e(t.entry[0]),r);return t.sidenodes.length<=i.length}return!1}var o=e(t.entry[0]),n=void 0!==t.entry[1]?this.hash(t.entry):this.zeroNode;return this.calculateRoot(n,o,t.sidenodes)===t.root},t.prototype.retrieveEntry=function(t){for(var r=e(t),i=[],o=0,n=this.root;n!==this.zeroNode;o++){var s=this.nodes.get(n),h=r[o];if(s[2])return s[0]===t?{entry:s,sidenodes:i}:{entry:[t],matchingEntry:s,sidenodes:i};n=s[h],i.push(s[Number(!h)])}return{entry:[t],sidenodes:i}},t.prototype.calculateRoot=function(t,e,r){for(var i=r.length-1;i>=0;i--){var o=e[i]?[r[i],t]:[t,r[i]];t=this.hash(o)}return t},t.prototype.addNewNodes=function(t,e,r,i){for(void 0===i&&(i=r.length-1);i>=0;i--){var o=e[i]?[r[i],t]:[t,r[i]];t=this.hash(o),this.nodes.set(t,o)}return t},t.prototype.deleteOldNodes=function(t,e,r,i){for(void 0===i&&(i=r.length-1);i>=0;i--){var o=e[i]?[r[i],t]:[t,r[i]];t=this.hash(o),this.nodes.delete(t)}},t.prototype.isLeaf=function(t){var e=this.nodes.get(t);return!(!e||!e[2])},t.prototype.checkParameterType=function(t){if(this.bigNumbers&&"bigint"!=typeof t)throw new Error("Parameter "+t+" must be a big number");if(!this.bigNumbers&&!r(t))throw new Error("Parameter "+t+" must be a hexadecimal")},t}();return t.SMT=i,Object.defineProperty(t,"__esModule",{value:!0}),t}({});
